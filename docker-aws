FROM ruby:3.3.0 AS builder
WORKDIR /app
COPY Gemfile Gemfile.lock ./
RUN bundle install

FROM ruby:3.3.0
RUN apt-get update -y && apt-get install ca-certificates -y
# Retrieve the environment variables from the build environment
ARG API_PORT
ARG DATABASE_URL
ARG ENCRYPTION_PRIMARY_KEY
ARG ENCRYPTION_KEY_DERIVATION_SALT
ARG ENCRYPTION_DETERMINISTIC_KEY
ARG PUBLISHER_PORTAL_URL
ARG LAGO_FRONT_URL
ARG LAGO_REDIS_CACHE_URL
ARG LAGO_RSA_PRIVATE_KEY
ARG SECRET_KEY_BASE
ARG REDIS_URL
ARG RAILS_ENV
ARG RACK_ENV
ARG AWS_ACCESS_KEY_ID
ARG AWS_SECRET_ACCESS_KEY
ARG LAGO_API_URL

# Set the environment variables inside the Docker image
ENV API_PORT=${API_PORT}
ENV DATABASE_URL=${DATABASE_URL}
ENV ENCRYPTION_PRIMARY_KEY=${ENCRYPTION_PRIMARY_KEY}
ENV ENCRYPTION_KEY_DERIVATION_SALT=${ENCRYPTION_KEY_DERIVATION_SALT}
ENV ENCRYPTION_DETERMINISTIC_KEY=${ENCRYPTION_DETERMINISTIC_KEY}
ENV PUBLISHER_PORTAL_URL=${PUBLISHER_PORTAL_URL}
ENV LAGO_FRONT_URL=${LAGO_FRONT_URL}
ENV LAGO_REDIS_CACHE_URL=${LAGO_REDIS_CACHE_URL}
ENV LAGO_RSA_PRIVATE_KEY=${LAGO_RSA_PRIVATE_KEY}
ENV SECRET_KEY_BASE=${SECRET_KEY_BASE}
ENV REDIS_URL=${REDIS_URL}
ENV RAILS_ENV=${RAILS_ENV}
ENV RACK_ENV=${RACK_ENV}
ENV AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
ENV AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
ENV LAGO_API_URL=${LAGO_API_URL}

# New ENV for runtime type
ENV RUNTIME=api

# Create a non-root user and group
RUN groupadd -r app && useradd -r -g app app

WORKDIR /app
COPY --from=builder /usr/local/bundle /usr/local/bundle
COPY . .

# Set permissions for the app user
RUN chown -R app:app /app

# Switch to the app user
USER app
RUN echo $LAGO_RSA_PRIVATE_KEY | base64 -d > /app/.rsa.pem

# Conditional command based on the RUNTIME environment variable
CMD if [ "$RUNTIME" = "api" ]; then ./scripts/start.sh; \
    elif [ "$RUNTIME" = "worker" ]; then ./scripts/start.worker.sh; \
    elif [ "$RUNTIME" = "clock" ]; then ./scripts/start.clock.sh; \
    else echo "Unknown RUNTIME value"; fi
